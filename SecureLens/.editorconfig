# Top-most EditorConfig file
root = true

# Apply settings to all C# files
[*.cs]

# -----------------------------
# Indentation and Formatting
# -----------------------------
indent_style = space
indent_size = 4
csharp_new_line_before_members = true

# -----------------------------
# C# Code Style Settings
# -----------------------------
# Use 'var' when type is apparent or for built-in types
dotnet_style_var_for_built_in_types = true:suggestion
dotnet_style_var_when_type_is_apparent = true:suggestion
dotnet_style_var_elsewhere = false:suggestion

# -----------------------------
# Naming Conventions
# -----------------------------

# Define Naming Styles

## PascalCase (e.g., MyMethod, MyProperty)
dotnet_naming_style.pascal_case.capitalization = pascal_case

## camelCase (e.g., myVariable, myParameter)
dotnet_naming_style.camel_case.capitalization = camel_case

## UPPER_CASE (e.g., MAX_VALUE)
dotnet_naming_style.upper_case.capitalization = all_upper

## _camelCase for private fields (e.g., _myField)
dotnet_naming_style.private_field.capitalization = camel_case
dotnet_naming_style.private_field.required_prefix = _

# Define Symbol Kinds

## Methods
dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = *
#dotnet_naming_symbols.methods.required_modifiers = *

## Local Variables
dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = *
#dotnet_naming_symbols.local_variables.required_modifiers = *

## Parameters
dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
#dotnet_naming_symbols.parameters.required_modifiers = *

## Properties
dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = *
#dotnet_naming_symbols.properties.required_modifiers = *

## Private Fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
#dotnet_naming_symbols.private_fields.required_modifiers = *

## Types (Classes, Interfaces, Enums, Structs, Delegates)
dotnet_naming_symbols.types.applicable_kinds = class, interface, enum, struct, delegate
dotnet_naming_symbols.types.applicable_accessibilities = *
#dotnet_naming_symbols.types.required_modifiers = *

# Define Naming Rules

## Methods should use PascalCase
dotnet_naming_rule.methods_should_be_pascal_case.symbols = methods
dotnet_naming_rule.methods_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.methods_should_be_pascal_case.severity = warning

## Local variables should use camelCase
dotnet_naming_rule.local_variables_should_be_camel_case.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camel_case.style = camel_case
dotnet_naming_rule.local_variables_should_be_camel_case.severity = warning

## Parameters should use camelCase
dotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case
dotnet_naming_rule.parameters_should_be_camel_case.severity = warning

## Properties should use PascalCase
dotnet_naming_rule.properties_should_be_pascal_case.symbols = properties
dotnet_naming_rule.properties_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.properties_should_be_pascal_case.severity = warning

## Private fields should use _camelCase
dotnet_naming_rule.private_fields_should_be_underscore_camel_case.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_underscore_camel_case.style = private_field
dotnet_naming_rule.private_fields_should_be_underscore_camel_case.severity = warning

## Types should use PascalCase
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.types_should_be_pascal_case.severity = warning

# -----------------------------
# Additional Style Rules (Optional)
# -----------------------------

# Prefer 'var' over explicit types where applicable
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Use expression-bodied members where possible
#csharp_style_expression_bodied_methods = when_possible:suggestion
#csharp_style_expression_bodied_properties = when_possible:suggestion

# Require accessibility modifiers (public, private, etc.)
dotnet_style_require_accessibility_modifiers = always:suggestion

# -----------------------------
# End of .editorconfig
# -----------------------------
